WR_train <- as.data.frame(my_scrape[["WR"]])
TE_train <- as.data.frame(my_scrape[["TE"]])
K_train <- as.data.frame(my_scrape[["K"]])
DST_train <- as.data.frame(my_scrape[["DST"]])
QB_train <- as.data.frame(train_scrape[["QB"]])
RB_train <- as.data.frame(train_scrape[["RB"]])
WR_train <- as.data.frame(train_scrape[["WR"]])
TE_train <- as.data.frame(train_scrape[["TE"]])
K_train <- as.data.frame(train_scrape[["K"]])
DST_train <- as.data.frame(train_scrape[["DST"]])
View(DST_train)
## Data Wrangling
train_scrape <- scrape_data(src = "CBS",
pos = c("QB","RB","WR","TE", "K", "DST"),
season = 2023,
week = 0)
QB_train <- as.data.frame(train_scrape[["QB"]])
RB_train <- as.data.frame(train_scrape[["RB"]])
WR_train <- as.data.frame(train_scrape[["WR"]])
TE_train <- as.data.frame(train_scrape[["TE"]])
K_train <- as.data.frame(train_scrape[["K"]])
DST_train <- as.data.frame(train_scrape[["DST"]])
View(DST_train)
test_scrape <- scrape_data(src = "CBS",
pos = c("QB","RB","WR","TE", "K", "DST"),
season = 2024,
week = 0)
QB_test <- as.data.frame(test_scrape[["QB"]])
RB_test <- as.data.frame(test_scrape[["RB"]])
WR_test <- as.data.frame(test_scrape[["WR"]])
TE_test <- as.data.frame(test_scrape[["TE"]])
K_test <- as.data.frame(test_scrape[["K"]])
DST_test <- as.data.frame(test_scrape[["DST"]])
## EDA
glimpse(train_scrape)
library("Data Explorer")
library("DataExplorer")
## EDA
glimpse(train_scrape)
library(tidyverse)
library(tidymodels)
library(vroom)
library(DataExplorer)
library(ggplot2)
library(patchwork)
library(poissonreg)
library(bestglm)
library(rpart)
library(ranger)
library(stacks)
## EDA
glimpse(train_scrape)
plot_intro(train_scrape)
plot_intro(QB_train)
plot_correlation(QB_train)
plot_correlation(RB_train)
plot_correlation(WR_train)
plot_correlation(TE_train)
plot_correlation(K_train)
plot_correlation(DST_train)
plot_correlation(DST_train)
View(QB_train)
View(QB_test)
View(test_scrape)
QB_recipe <- recipe(site_fppg~., data = QB_train) |>
step_rm(data_src,pos,games) |>
step_dummy(all_nominal_predictors()) |>
step_normalize(all_numeric_predictors())
prepped_QB <- prep(QB_recipe)
View(prepped_QB)
bake(prepped_QB, new_data = QB_train)
QB_mod <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 250) |>
set_engine("ranger") |>
set_mode("regression")
## Create a workflow with recipe
QB_wf <- workflow() |>
add_recipe(QB_recipe) |>
add_model(QB_mod)
## Set up grid and tuning values
QB_tuning_params <- grid_regular(mtry(range = c(1,50)),
min_n(),
levels = 5)
##Split data for CV
QB_folds <- vfold_cv(QB_train, v = 5, repeats = 1)
##Run the CV
QB_CV_results <- QB_wf |>
tune_grid(resamples=QB_folds,
grid = QB_tuning_params,
metrics =metric_set(rmse,mae,rsq))
QB_recipe <- recipe(site_fppg~., data = QB_train) |>
step_rm(data_src,pos,games,player) |>
step_dummy(all_nominal_predictors()) |>
step_normalize(all_numeric_predictors())
prepped_QB <- prep(QB_recipe)
QB_mod <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 250) |>
set_engine("ranger") |>
set_mode("regression")
## Create a workflow with recipe
QB_wf <- workflow() |>
add_recipe(QB_recipe) |>
add_model(QB_mod)
## Set up grid and tuning values
QB_tuning_params <- grid_regular(mtry(range = c(1,50)),
min_n(),
levels = 5)
##Split data for CV
QB_folds <- vfold_cv(QB_train, v = 5, repeats = 1)
##Run the CV
QB_CV_results <- QB_wf |>
tune_grid(resamples=QB_folds,
grid = QB_tuning_params,
metrics =metric_set(rmse,mae,rsq))
View(QB_CV_results)
##Find Best Tuning Parameters
QB_best_tune <- QB_CV_results |>
select_best(metric = "rmse")
##finalize the workflow and fit it
QB_final <- QB_wf |>
finalize_workflow(QB_best_tune) |>
fit(data = QB_train)
install.packages("ffopportunity", repos = c("https://ffverse.r-universe.dev", getOption("repos")))
library(ffanalytics)
library(ffopportunity)
?ep_load
ep_load(type = "weekly")
?ep_build
ep_build()
test <- ep_load(type = "weekly")
test2 <-ep_build()
View(test)
View(test2)
?ep_load
####################################################################################
load_data <- ep_load()
build_data <-ep_build()
View(build_data)
?ep_build
player_summary <- as.data.frame(build_data[["ep_weekly"]])
View(player_summary)
pass_plays <- as.data.frame(build_data[["ep_pbp_pass"]])
View(pass_plays)
rush_plays <- as.data.frame(build_data[["ep_pbp_rush"]])
View(rush_plays)
plot_correlation(pass_plays)
View(pass_plays)
library(tidyverse)
library(tidymodels)
cor(pass_plays)
?cor
correlations(pass_plays)
library(tidyverse)
library(tidymodels)
my_recipe <- recipe(ep~., data = pass_plays) |>
step_ts_clean() |>
step_dummy(all_nominal_predictors()) |>
step_corr(all_numeric_predictors(), threshold = .5) |>
step_normalize(all_numeric_predictors())
my_recipe <- recipe(ep~., data = pass_plays) |>
step_dummy(all_nominal_predictors()) |>
step_corr(all_numeric_predictors(), threshold = .5) |>
step_normalize(all_numeric_predictors())
prepped_recipe <- prep(my_recipe)
my_recipe <- recipe(ep~., data = pass_plays) |>
step_corr(all_numeric_predictors(), threshold = .5) |>
step_normalize(all_numeric_predictors())
prepped_recipe <- prep(my_recipe)
show <- bake(prepped_recipe, new_data = pass_plays)
View(show)
my_recipe <- recipe(ep~., data = pass_plays) |>
step_corr(all_numeric_predictors(), threshold = .8) |>
step_normalize(all_numeric_predictors())
prepped_recipe <- prep(my_recipe)
show <- bake(prepped_recipe, new_data = pass_plays)
View(show)
my_recipe <- recipe(ep~., data = pass_plays) |>
step_corr(all_numeric_predictors(), threshold = .2) |>
step_normalize(all_numeric_predictors())
prepped_recipe <- prep(my_recipe)
show <- bake(prepped_recipe, new_data = pass_plays)
View(show)
my_recipe <- recipe(ep~., data = pass_plays) |>
step_corr(all_numeric_predictors(), threshold = .2) |>
step_rm(game_id, desc, passer_player_id, passer_full_name, passer_position,
receiver_player_id, receiver_full_name, receiver_position) |>
step_normalize(all_numeric_predictors())
prepped_recipe <- prep(my_recipe)
show <- bake(prepped_recipe, new_data = pass_plays)
View(show)
plot_correlation(show)
my_recipe <- recipe(ep~., data = pass_plays) |>
step_corr(all_numeric_predictors(), threshold = .1) |>
step_rm(game_id, desc, passer_player_id, passer_full_name, passer_position,
receiver_player_id, receiver_full_name, receiver_position) |>
step_normalize(all_numeric_predictors())
prepped_recipe <- prep(my_recipe)
show <- bake(prepped_recipe, new_data = pass_plays)
plot_correlation(show)
library(corrplot)
corrplot(show)
rlang::last_trace()
corrplot(pass_plays)
#scatterplot of count v temp + season
graph2 <- ggplot(train_data, aes(x = temp, y = count, color = factor(season))) +
geom_point()+
scale_color_manual(values = c("1" = "pink", "2" = "yellow", "3" = "darkorange", "4" = "lightblue"),
labels = c("1" = "Spring", "2" = "Summer", "3" = "Fall", "4" = "Winter")) +
labs(x = "Tempurature (Celsius)", y = "Number of Total Rentals")
library(ggplot2)
ggplot(pass_plays, aes(x = air_yards, y = ep)) +
geom_point()
ggplot(pass_plays, aes(x = air_yards*vegas_wp, y = ep)) +
geom_point()
ggplot(pass_plays, aes(x = vegas_wp, y = ep)) +
geom_point()
ggplot(pass_plays, aes(x = relative_to_endzone, y = ep)) +
geom_point()
ggplot(pass_plays, aes(x = relative_to_endzone*air_yards, y = ep)) +
geom_point()
ggplot(pass_plays, aes(x = relative_to_endzone, y = ep)) +
geom_point()
ggplot(pass_plays, aes(x = relative_to_endzone, y = ep, color = factor(passer_full_name))) +
geom_point()
ggplot(pass_plays, aes(x = relative_to_endzone, y = ep, color = factor(posteam))) +
geom_point()
ggplot(pass_plays, aes(x = relative_to_endzone*receiving_yards, y = ep, color = factor(posteam))) +
geom_point()
ggplot(pass_plays, aes(x = receiving_yards, y = ep, color = factor(posteam))) +
geom_point()
View(build_data)
ggplot(pass_plays, aes(x = air_yards*complete_pass, y = ep, color = factor(posteam))) +
geom_point()
ggplot(pass_plays, aes(x = air_yards, y = ep, color = factor(complete_pass))) +
geom_point()
library(dplyr)
QB_sum <- pass_plays |>
group_by(passer_full_name) |>
summarise(complete_pass = sum(complete_pass))
pass_plays$complete_pass <- as.numeric(as.character(pass_plays$complete_pass))
# Now group and summarize
QB_sum <- pass_plays |>
group_by(passer_full_name) |>
summarise(complete_pass = sum(complete_pass, na.rm = TRUE))
View(QB_sum)
# Now group and summarize
QB_sum <- pass_plays |>
group_by(passer_full_name) |>
summarise(complete_pass = sum(complete_pass, na.rm = TRUE)) |>
summarise(ep = sum(ep, na.rm = TRUE))
pass_plays <- as.data.frame(build_data[["ep_pbp_pass"]])
pass_plays$complete_pass <- as.numeric(as.character(pass_plays$complete_pass))
# Now group and summarize
QB_sum <- pass_plays |>
group_by(passer_full_name) |>
summarise(complete_pass = sum(complete_pass, na.rm = TRUE)) |>
summarise(ep = sum(ep, na.rm = TRUE))
# Now group and summarize
QB_sum <- pass_plays |>
group_by(passer_full_name) |>
summarise(complete_pass = sum(complete_pass, na.rm = TRUE),
ep = sum(ep, na.rm = TRUE))
View(QB_sum)
# Now group and summarize
QB_sum <- pass_plays |>
mutate(complete_pass = as.numeric(as.character(complete_pass)))
# Now group and summarize
QB_sum <- pass_plays |>
mutate(complete_pass = as.numeric(as.character(complete_pass))) |>
group_by(passer_full_name) |>
summarise(complete_pass = sum(complete_pass, na.rm = TRUE),
ep = sum(ep, na.rm = TRUE))
# Now group and summarize
QB_sum <- pass_plays |>
mutate(complete_pass = as.numeric(as.character(complete_pass))) |>
group_by(passer_full_name) |>
summarise(complete_pass = sum(complete_pass, na.rm = TRUE),
ep = sum(ep, na.rm = TRUE),
air_yards = sum(air_yards, na.rm = TRUE))
View(QB_sum)
ggplot(QB_sum, aes(x = air_yards, y = ep, color = factor(complete_pass))) +
geom_point()
# Now group and summarize
QB_sum <- pass_plays |>
mutate(complete_pass = as.numeric(as.character(complete_pass))) |>
group_by(passer_full_name) |>
summarise(complete_pass = sum(complete_pass, na.rm = TRUE),
ep = sum(ep, na.rm = TRUE),
air_yards = sum(air_yards, na.rm = TRUE)) |>
mutate(pass_group = case_when(
complete_pass <= 25 & complete_pass >= 0 ~ "low",
complete_pass >= 26 & complete_pass <= 50 ~ "mid",
complete_pass >= 51 & complete_pass <= 75 ~ "high",
complete_pass > 75 ~ "very high"))
View(QB_sum)
ggplot(QB_sum, aes(x = air_yards, y = ep, color = factor(pass_group))) +
geom_point()
ggplot(QB_sum, aes(x = air_yards, y = ep, color = factor(pass_group))) +
geom_point() +
scale_color_manual(values = c("low" = "red", "mid" = "yellow", "high" = "blue", "very high" = "green"),
labels = c("low" = "low (0-25)", "mid" = "mid (25-50) ", "high" = "high (50-75)", "very high" = "very high (75+)")) +
labs(x = "Air Yards", y = "Expected Points")
ggplot(QB_sum, aes(x = air_yards, y = ep, color = factor(pass_group))) +
geom_point() +
scale_color_manual(values = c("low" = "red", "mid" = "orange", "high" = "blue", "very high" = "green"),
labels = c("low" = "low (0-25)", "mid" = "mid (25-50) ", "high" = "high (50-75)", "very high" = "very high (75+)")) +
labs(x = "Air Yards", y = "Expected Points")
ggplot(QB_sum, aes(x = air_yards, y = ep, color = factor(pass_group))) +
geom_point() +
scale_color_manual(values = c("low" = "red", "mid" = "orange", "high" = "blue", "very high" = "green"),
labels = c("low" = "low (0-25)", "mid" = "mid (25-50) ", "high" = "high (50-75)", "very high" = "very high (75+)")) +
labs(x = "Air Yards", y = "Expected Points", color = "Number of Complete Passes")
ggplot(QB_sum, aes(x = air_yards, y = ep, color = factor(pass_group))) +
geom_point() +
scale_color_manual(values = c("low" = "red", "mid" = "orange", "high" = "blue", "very high" = "green"),
labels = c("low" = "low (0-25)", "mid" = "mid (25-50) ", "high" = "high (50-75)", "very high" = "very high (75+)"),
limits = c("low", "mid", "high", "very high")) +
labs(x = "Air Yards", y = "Expected Points", color = "Number of Complete Passes")
ggplot(QB_sum, aes(x = air_yards, y = ep, color = factor(pass_group))) +
geom_point() +
scale_color_manual(values = c("low" = "red", "mid" = "orange", "high" = "darkblue", "very high" = "darkgreen"),
labels = c("low" = "low (0-25)", "mid" = "mid (25-50) ", "high" = "high (50-75)", "very high" = "very high (75+)"),
limits = c("low", "mid", "high", "very high")) +
labs(x = "Air Yards", y = "Expected Points", color = "Number of Complete Passes")
ggplot(QB_sum, aes(x = air_yards, y = ep, color = factor(pass_group))) +
geom_point() +
scale_color_manual(values = c("low" = "red", "mid" = "orange", "high" = "skyblue", "very high" = "darkgreen"),
labels = c("low" = "low (0-25)", "mid" = "mid (25-50) ", "high" = "high (50-75)", "very high" = "very high (75+)"),
limits = c("low", "mid", "high", "very high")) +
labs(x = "Air Yards", y = "Expected Points", color = "Number of Complete Passes")
Game_sum <- pass_plays |>
mutate(complete_pass = as.numeric(as.character(complete_pass))) |>
group_by(game_id) |>
summarise(complete_pass = sum(complete_pass, na.rm = TRUE),
ep = sum(ep, na.rm = TRUE),
air_yards = sum(air_yards, na.rm = TRUE)) |>
mutate(pass_group = case_when(
complete_pass <= 25 & complete_pass >= 0 ~ "low",
complete_pass >= 26 & complete_pass <= 50 ~ "mid",
complete_pass >= 51 & complete_pass <= 75 ~ "high",
complete_pass > 75 ~ "very high"))
ggplot(game_sum, aes(x = air_yards, y = ep, color = factor(pass_group))) +
geom_point() +
scale_color_manual(values = c("low" = "red", "mid" = "orange", "high" = "skyblue", "very high" = "darkgreen"),
labels = c("low" = "low (0-25)", "mid" = "mid (25-50) ", "high" = "high (50-75)", "very high" = "very high (75+)"),
limits = c("low", "mid", "high", "very high")) +
labs(x = "Air Yards", y = "Expected Points", color = "Number of Complete Passes")
game_sum <- pass_plays |>
mutate(complete_pass = as.numeric(as.character(complete_pass))) |>
group_by(game_id) |>
summarise(complete_pass = sum(complete_pass, na.rm = TRUE),
ep = sum(ep, na.rm = TRUE),
air_yards = sum(air_yards, na.rm = TRUE)) |>
mutate(pass_group = case_when(
complete_pass <= 25 & complete_pass >= 0 ~ "low",
complete_pass >= 26 & complete_pass <= 50 ~ "mid",
complete_pass >= 51 & complete_pass <= 75 ~ "high",
complete_pass > 75 ~ "very high"))
ggplot(game_sum, aes(x = air_yards, y = ep, color = factor(pass_group))) +
geom_point() +
scale_color_manual(values = c("low" = "red", "mid" = "orange", "high" = "skyblue", "very high" = "darkgreen"),
labels = c("low" = "low (0-25)", "mid" = "mid (25-50) ", "high" = "high (50-75)", "very high" = "very high (75+)"),
limits = c("low", "mid", "high", "very high")) +
labs(x = "Air Yards", y = "Expected Points", color = "Number of Complete Passes")
View(game_sum)
game_sum <- pass_plays |>
mutate(complete_pass = as.numeric(as.character(complete_pass))) |>
group_by(game_id, posteam) |>
summarise(complete_pass = sum(complete_pass, na.rm = TRUE),
ep = sum(ep, na.rm = TRUE),
air_yards = sum(air_yards, na.rm = TRUE)) |>
mutate(pass_group = case_when(
complete_pass <= 25 & complete_pass >= 0 ~ "low",
complete_pass >= 26 & complete_pass <= 50 ~ "mid",
complete_pass >= 51 & complete_pass <= 75 ~ "high",
complete_pass > 75 ~ "very high"))
View(game_sum)
game_sum <- pass_plays |>
mutate(complete_pass = as.numeric(as.character(complete_pass))) |>
group_by(game_id, posteam) |>
summarise(complete_pass = sum(complete_pass, na.rm = TRUE),
ep = sum(ep, na.rm = TRUE),
air_yards = sum(air_yards, na.rm = TRUE)) |>
mutate(pass_group = case_when(
complete_pass <= 15 & complete_pass >= 0 ~ "low",
complete_pass >= 16 & complete_pass <= 25 ~ "mid",
complete_pass >= 26 & complete_pass <= 30 ~ "high",
complete_pass > 30 ~ "very high"))
ggplot(game_sum, aes(x = air_yards, y = ep, color = factor(pass_group))) +
geom_point() +
scale_color_manual(values = c("low" = "red", "mid" = "orange", "high" = "skyblue", "very high" = "darkgreen"),
labels = c("low" = "low (0-25)", "mid" = "mid (25-50) ", "high" = "high (50-75)", "very high" = "very high (75+)"),
limits = c("low", "mid", "high", "very high")) +
labs(x = "Air Yards", y = "Expected Points", color = "Number of Complete Passes")
game_sum <- pass_plays |>
mutate(complete_pass = as.numeric(as.character(complete_pass))) |>
group_by(game_id, posteam) |>
summarise(complete_pass = sum(complete_pass, na.rm = TRUE),
ep = sum(ep, na.rm = TRUE),
air_yards = sum(air_yards, na.rm = TRUE)) |>
mutate(pass_group = case_when(
complete_pass <= 13 & complete_pass >= 0 ~ "low",
complete_pass >= 14 & complete_pass <= 19 ~ "mid",
complete_pass >= 20 & complete_pass <= 28 ~ "high",
complete_pass > 28 ~ "very high"))
ggplot(game_sum, aes(x = air_yards, y = ep, color = factor(pass_group))) +
geom_point() +
scale_color_manual(values = c("low" = "red", "mid" = "orange", "high" = "skyblue", "very high" = "darkgreen"),
labels = c("low" = "low (0-25)", "mid" = "mid (25-50) ", "high" = "high (50-75)", "very high" = "very high (75+)"),
limits = c("low", "mid", "high", "very high")) +
labs(x = "Air Yards", y = "Expected Points", color = "Number of Complete Passes")
ggplot(game_sum, aes(x = air_yards, y = ep, color = factor(pass_group))) +
geom_point() +
scale_color_manual(values = c("low" = "red", "mid" = "orange", "high" = "skyblue", "very high" = "darkgreen"),
labels = c("low" = "low (0-13)", "mid" = "mid (14-19) ", "high" = "high (20-28)", "very high" = "very high (28+)"),
limits = c("low", "mid", "high", "very high")) +
labs(x = "Air Yards", y = "Expected Points", color = "Number of Complete Passes")
shapiro.test(pass_plays)
shapiro.test(game_sum$ep)
shapiro.test(game_sum$air_yards)
shapiro.test(game_sum$complete_pass)
cor.test(game_sum$air_yards, game_sum$ep, method = "spearman")
cor.test(game_sum$air_yards, game_sum$ep, method = "kendall")
cor.test(game_sum$complete_pass, game_sum$ep, method = "kendall")
## Add libraries
library(ffopportunity)
library(tidyverse)
library(ggplot2)
library(dplyr)
## Get data from ffoportunity
load_data <- ep_load()
build_data <-ep_build()
player_summary <- as.data.frame(build_data[["ep_weekly"]])
pass_plays <- as.data.frame(build_data[["ep_pbp_pass"]])
rush_plays <- as.data.frame(build_data[["ep_pbp_rush"]])
## First scatterplot
ggplot(pass_plays, aes(x = air_yards, y = ep, color = factor(complete_pass))) +
geom_point()
## First scatterplot
first_plot <- ggplot(pass_plays, aes(x = air_yards, y = ep, color = factor(complete_pass))) +
geom_point()
first_plot
## Group by quarterback to look at individual players
QB_sum <- pass_plays |>
mutate(complete_pass = as.numeric(as.character(complete_pass))) |>
group_by(passer_full_name) |>
summarise(complete_pass = sum(complete_pass, na.rm = TRUE),
ep = sum(ep, na.rm = TRUE),
air_yards = sum(air_yards, na.rm = TRUE)) |>
mutate(pass_group = case_when(
complete_pass <= 25 & complete_pass >= 0 ~ "low",
complete_pass >= 26 & complete_pass <= 50 ~ "mid",
complete_pass >= 51 & complete_pass <= 75 ~ "high",
complete_pass > 75 ~ "very high"))
## Plotting Expected Points by Air Yards and Complete Passes
qb_plot <- ggplot(QB_sum, aes(x = air_yards, y = ep, color = factor(pass_group))) +
geom_point() +
scale_color_manual(values = c("low" = "red", "mid" = "orange", "high" = "skyblue", "very high" = "darkgreen"),
labels = c("low" = "low (0-25)", "mid" = "mid (25-50) ", "high" = "high (50-75)", "very high" = "very high (75+)"),
limits = c("low", "mid", "high", "very high")) +
labs(x = "Air Yards", y = "Expected Points", color = "Number of Complete Passes")
qb_plot
## Grouping by individual games (I know there are different quarterbacks that can play in a game but the majority of the time there is just the starter)
game_sum <- pass_plays |>
mutate(complete_pass = as.numeric(as.character(complete_pass))) |>
group_by(game_id, posteam) |>
summarise(complete_pass = sum(complete_pass, na.rm = TRUE),
ep = sum(ep, na.rm = TRUE),
air_yards = sum(air_yards, na.rm = TRUE)) |>
mutate(pass_group = case_when(
complete_pass <= 13 & complete_pass >= 0 ~ "low",
complete_pass >= 14 & complete_pass <= 19 ~ "mid",
complete_pass >= 20 & complete_pass <= 28 ~ "high",
complete_pass > 28 ~ "very high"))
## Plotting Expected Points by Air Yards and Complete Passes
game_plot <- ggplot(game_sum, aes(x = air_yards, y = ep, color = factor(pass_group))) +
geom_point() +
scale_color_manual(values = c("low" = "red", "mid" = "orange", "high" = "skyblue", "very high" = "darkgreen"),
labels = c("low" = "low (0-13)", "mid" = "mid (14-19) ", "high" = "high (20-28)", "very high" = "very high (28+)"),
limits = c("low", "mid", "high", "very high")) +
labs(x = "Air Yards", y = "Expected Points", color = "Number of Complete Passes")
game_plot
#checking for normality to see what method to use
shapiro.test(game_sum$ep)
shapiro.test(game_sum$air_yards)
shapiro.test(game_sum$complete_pass)
#Correlation tests for air yards and complete passes
ay_ep_corr <- cor.test(game_sum$air_yards, game_sum$ep, method = "kendall")
cp_ep_corr <- cor.test(game_sum$complete_pass, game_sum$ep, method = "kendall")
print(ay_ep_corr, cp_ep_corr)
ay_ep_corr
View(ay_ep_corr)
#Correlation tests for air yards and complete passes
ay_ep_corr <- cor.test(game_sum$air_yards, game_sum$., method = "kendall")
View(pass_plays)
ay_ep_corr
cp_ep_corr
#these are default options so that by default, your pdf will include the code from your code chunks
knitr::opts_chunk$set(echo = TRUE)
#You will also want to load any external libraries you'll be using, e.g., ggplot, in your document here (you can load them at anytime, but it's good practice to load them at the beginning)
#run the line below just once:
#tinytex::install_tinytex()
library(tinytex)
#Finally, you may also want to change your working directory here using: setwd(filepath) #default is to use the directory where this file is stored.  If you use the default, you will want to put the two data files in the same folder as this Rmd file.
#Include your code for answer 1a here.
mysamp <- rbinom(100, size=20, prob=0.4)
hist(mysamp)
#Include your code for answer 1b here.
#If you have a mac/linux, use the line below and add any necessary filepath information with forward slashes:
load('PracticeRmdRdata.Rdata')
